package com.heyzeusv.solitaire.util

import com.heyzeusv.solitaire.board.piles.CardLogic

@Suppress("MemberVisibilityCanBePrivate", "unused")
object TestCards {

    val card1C = CardLogic(0, Suits.CLUBS)
    val card2C = CardLogic(1, Suits.CLUBS)
    val card3C = CardLogic(2, Suits.CLUBS)
    val card4C = CardLogic(3, Suits.CLUBS)
    val card5C = CardLogic(4, Suits.CLUBS)
    val card6C = CardLogic(5, Suits.CLUBS)
    val card7C = CardLogic(6, Suits.CLUBS)
    val card8C = CardLogic(7, Suits.CLUBS)
    val card9C = CardLogic(8, Suits.CLUBS)
    val card10C = CardLogic(9, Suits.CLUBS)
    val card11C = CardLogic(10, Suits.CLUBS)
    val card12C = CardLogic(11, Suits.CLUBS)
    val card13C = CardLogic(12, Suits.CLUBS)

    val card1D = CardLogic(0, Suits.DIAMONDS)
    val card2D = CardLogic(1, Suits.DIAMONDS)
    val card3D = CardLogic(2, Suits.DIAMONDS)
    val card4D = CardLogic(3, Suits.DIAMONDS)
    val card5D = CardLogic(4, Suits.DIAMONDS)
    val card6D = CardLogic(5, Suits.DIAMONDS)
    val card7D = CardLogic(6, Suits.DIAMONDS)
    val card8D = CardLogic(7, Suits.DIAMONDS)
    val card9D = CardLogic(8, Suits.DIAMONDS)
    val card10D = CardLogic(9, Suits.DIAMONDS)
    val card11D = CardLogic(10, Suits.DIAMONDS)
    val card12D = CardLogic(11, Suits.DIAMONDS)
    val card13D = CardLogic(12, Suits.DIAMONDS)

    val card1H = CardLogic(0, Suits.HEARTS)
    val card2H = CardLogic(1, Suits.HEARTS)
    val card3H = CardLogic(2, Suits.HEARTS)
    val card4H = CardLogic(3, Suits.HEARTS)
    val card5H = CardLogic(4, Suits.HEARTS)
    val card6H = CardLogic(5, Suits.HEARTS)
    val card7H = CardLogic(6, Suits.HEARTS)
    val card8H = CardLogic(7, Suits.HEARTS)
    val card9H = CardLogic(8, Suits.HEARTS)
    val card10H = CardLogic(9, Suits.HEARTS)
    val card11H = CardLogic(10, Suits.HEARTS)
    val card12H = CardLogic(11, Suits.HEARTS)
    val card13H = CardLogic(12, Suits.HEARTS)

    val card1S = CardLogic(0, Suits.SPADES)
    val card2S = CardLogic(1, Suits.SPADES)
    val card3S = CardLogic(2, Suits.SPADES)
    val card4S = CardLogic(3, Suits.SPADES)
    val card5S = CardLogic(4, Suits.SPADES)
    val card6S = CardLogic(5, Suits.SPADES)
    val card7S = CardLogic(6, Suits.SPADES)
    val card8S = CardLogic(7, Suits.SPADES)
    val card9S = CardLogic(8, Suits.SPADES)
    val card10S = CardLogic(9, Suits.SPADES)
    val card11S = CardLogic(10, Suits.SPADES)
    val card12S = CardLogic(11, Suits.SPADES)
    val card13S = CardLogic(12, Suits.SPADES)

    val card1CFU = CardLogic(0, Suits.CLUBS, faceUp = true)
    val card2CFU = CardLogic(1, Suits.CLUBS, faceUp = true)
    val card3CFU = CardLogic(2, Suits.CLUBS, faceUp = true)
    val card4CFU = CardLogic(3, Suits.CLUBS, faceUp = true)
    val card5CFU = CardLogic(4, Suits.CLUBS, faceUp = true)
    val card6CFU = CardLogic(5, Suits.CLUBS, faceUp = true)
    val card7CFU = CardLogic(6, Suits.CLUBS, faceUp = true)
    val card8CFU = CardLogic(7, Suits.CLUBS, faceUp = true)
    val card9CFU = CardLogic(8, Suits.CLUBS, faceUp = true)
    val card10CFU = CardLogic(9, Suits.CLUBS, faceUp = true)
    val card11CFU = CardLogic(10, Suits.CLUBS, faceUp = true)
    val card12CFU = CardLogic(11, Suits.CLUBS, faceUp = true)
    val card13CFU = CardLogic(12, Suits.CLUBS, faceUp = true)

    val card1DFU = CardLogic(0, Suits.DIAMONDS, faceUp = true)
    val card2DFU = CardLogic(1, Suits.DIAMONDS, faceUp = true)
    val card3DFU = CardLogic(2, Suits.DIAMONDS, faceUp = true)
    val card4DFU = CardLogic(3, Suits.DIAMONDS, faceUp = true)
    val card5DFU = CardLogic(4, Suits.DIAMONDS, faceUp = true)
    val card6DFU = CardLogic(5, Suits.DIAMONDS, faceUp = true)
    val card7DFU = CardLogic(6, Suits.DIAMONDS, faceUp = true)
    val card8DFU = CardLogic(7, Suits.DIAMONDS, faceUp = true)
    val card9DFU = CardLogic(8, Suits.DIAMONDS, faceUp = true)
    val card10DFU = CardLogic(9, Suits.DIAMONDS, faceUp = true)
    val card11DFU = CardLogic(10, Suits.DIAMONDS, faceUp = true)
    val card12DFU = CardLogic(11, Suits.DIAMONDS, faceUp = true)
    val card13DFU = CardLogic(12, Suits.DIAMONDS, faceUp = true)

    val card1HFU = CardLogic(0, Suits.HEARTS, faceUp = true)
    val card2HFU = CardLogic(1, Suits.HEARTS, faceUp = true)
    val card3HFU = CardLogic(2, Suits.HEARTS, faceUp = true)
    val card4HFU = CardLogic(3, Suits.HEARTS, faceUp = true)
    val card5HFU = CardLogic(4, Suits.HEARTS, faceUp = true)
    val card6HFU = CardLogic(5, Suits.HEARTS, faceUp = true)
    val card7HFU = CardLogic(6, Suits.HEARTS, faceUp = true)
    val card8HFU = CardLogic(7, Suits.HEARTS, faceUp = true)
    val card9HFU = CardLogic(8, Suits.HEARTS, faceUp = true)
    val card10HFU = CardLogic(9, Suits.HEARTS, faceUp = true)
    val card11HFU = CardLogic(10, Suits.HEARTS, faceUp = true)
    val card12HFU = CardLogic(11, Suits.HEARTS, faceUp = true)
    val card13HFU = CardLogic(12, Suits.HEARTS, faceUp = true)

    val card1SFU = CardLogic(0, Suits.SPADES, faceUp = true)
    val card2SFU = CardLogic(1, Suits.SPADES, faceUp = true)
    val card3SFU = CardLogic(2, Suits.SPADES, faceUp = true)
    val card4SFU = CardLogic(3, Suits.SPADES, faceUp = true)
    val card5SFU = CardLogic(4, Suits.SPADES, faceUp = true)
    val card6SFU = CardLogic(5, Suits.SPADES, faceUp = true)
    val card7SFU = CardLogic(6, Suits.SPADES, faceUp = true)
    val card8SFU = CardLogic(7, Suits.SPADES, faceUp = true)
    val card9SFU = CardLogic(8, Suits.SPADES, faceUp = true)
    val card10SFU = CardLogic(9, Suits.SPADES, faceUp = true)
    val card11SFU = CardLogic(10, Suits.SPADES, faceUp = true)
    val card12SFU = CardLogic(11, Suits.SPADES, faceUp = true)
    val card13SFU = CardLogic(12, Suits.SPADES, faceUp = true)

    val deck = mutableListOf(
        card1C, card2C, card3C, card4C, card5C, card6C, card7C, card8C, card9C, card10C, card11C, card12C, card13C,
        card1D, card2D, card3D, card4D, card5D, card6D, card7D, card8D, card9D, card10D, card11D, card12D, card13D,
        card1H, card2H, card3H, card4H, card5H, card6H, card7H, card8H, card9H, card10H, card11H, card12H, card13H ,
        card1S, card2S, card3S, card4S, card5S, card6S, card7S, card8S, card9S, card10S, card11S, card12S, card13S,
    )
}